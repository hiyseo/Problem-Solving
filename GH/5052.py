# 5052
# 전화번호 목록이 주어진다. 이때, 이 목록이 일관성이 있는지 없는지를 구하는 프로그램을 작성하시오.
# 전화번호 목록이 일관성을 유지하려면, 한 번호가 다른 번호의 접두어인 경우가 없어야 한다.
# 예를 들어, 전화번호 목록이 아래와 같은 경우를 생각해보자

# 긴급전화: 911
# 상근: 97 625 999
# 선영: 91 12 54 26
# 이 경우에 선영이에게 전화를 걸 수 있는 방법이 없다. 전화기를 들고 선영이 번호의 처음 세 자리를 누르는 순간 바로 긴급전화가 걸리기 때문이다. 따라서, 이 목록은 일관성이 없는 목록이다.

# 입력
# 첫째 줄에 테스트 케이스의 개수 t가 주어진다. (1 ≤ t ≤ 50) 
# 각 테스트 케이스의 첫째 줄에는 전화번호의 수 n이 주어진다. (1 ≤ n ≤ 10000) 
# 다음 n개의 줄에는 목록에 포함되어 있는 전화번호가 하나씩 주어진다. 전화번호의 길이는 길어야 10자리이며, 목록에 있는 두 전화번호가 같은 경우는 없다.

# 출력
# 각 테스트 케이스에 대해서, 일관성 있는 목록인 경우에는 YES, 아닌 경우에는 NO를 출력한다.

# 예제 입력 1 
# 2
# 3
# 911
# 97625999
# 91125426
# 5
# 113
# 12340
# 123440
# 12345
# 98346

# 예제 출력 1 
# NO
# YES

### 수도코드 ###
# 정렬 후 인접한 두개만 비교!
# t(테스트 케이스 개수) 입력
# flag = 1 (1: YES, 0: NO)
# n(전화번호 개수) 입력
# numbers = [전화번호 리스트]
# numbers.sort()
# while flag == 1:
# 인접한 두개끼리만 접두어인지 비교
# 서로 같거나, 포함되는게 있다면 flag = 0

# First Try
# a in b 라고 해서 실패함
# in을 사용하는 경우 중간에 포함되어 있더라도 결과 통과함

# Second Try
# 앞에 명확한 길이를 명시함

t = int(input())
for _ in range(t):
    flag = 1 # 1: YES, 0: NO
    n = int(input())
    numbers = [input() for _ in range(n)]
    # print(f"numbers: {numbers}")

    numbers.sort()
    # print(f"sorted_numbers: {numbers}")

    for i in range(n-1):
        a, b = numbers[i], numbers[i+1]
        target = len(a)
        check_str = b[:target]
        # print(f"check_str: {check_str}")
        if a == check_str:
            flag = 0
            break
    
    if flag: print("YES")
    else: print("NO")

### 테스트케이스 ###
# 1
# 3
# 911
# 91